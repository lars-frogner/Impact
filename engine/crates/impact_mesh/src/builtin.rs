//! Meshes that should always be available.

use crate::{
    FrontFaceSide, TriangleMeshRegistry, import,
    setup::{BoxMesh, SphericalLightVolumeMesh, TriangleMeshTemplate},
};
use anyhow::Result;

/// Loads all builtin meshes into the registry.
pub fn load_builtin_meshes(registry: &mut TriangleMeshRegistry) -> Result<()> {
    for spec_fn in [
        screen_filling_quad_mesh_spec,
        spherical_light_volume_mesh_spec,
        skybox_mesh_spec,
    ] {
        import::load_specified_triangle_mesh(registry, &spec_fn())?;
    }
    Ok(())
}

macro_rules! define_builtin_triangle_mesh {
    (
        $(#[$id_meta:meta])*
        fn $id_fn_name:ident() => $desc:expr;

        $(#[$spec_meta:meta])*
        fn $spec_fn_name:ident() => $template:expr;
    ) => {
        pastey::paste! {
            static [<$id_fn_name:upper>]: std::sync::LazyLock<$crate::TriangleMeshID> =
                std::sync::LazyLock::new(|| $crate::TriangleMeshID(impact_math::hash64!($desc)));

            $(#[$id_meta])*
            pub fn $id_fn_name() -> $crate::TriangleMeshID {
                *[<$id_fn_name:upper>]
            }

            $(#[$spec_meta])*
            fn $spec_fn_name() -> $crate::import::TriangleMeshSpecification {
                $crate::import::TriangleMeshSpecification {
                    name: String::from($desc),
                    source: $crate::import::TriangleMeshSource::Template($template),
                    texture_projection: None,
                }
            }
        }
    };
}

define_builtin_triangle_mesh! {
    /// The [`TriangleMeshID`](crate::TriangleMeshID) of a builtin mesh
    /// generated by
    /// [`TriangleMesh::create_screen_filling_quad`](crate::TriangleMesh::create_screen_filling_quad);
    fn screen_filling_quad_mesh_id() => "Screen filling quad mesh";

    fn screen_filling_quad_mesh_spec() => TriangleMeshTemplate::ScreenFillingQuad;
}

define_builtin_triangle_mesh! {
    /// The [`TriangleMeshID`](crate::TriangleMeshID) of a builtin mesh
    /// generated by
    /// [`TriangleMesh::create_spherical_light_volume`](crate::TriangleMesh::create_spherical_light_volume).
    fn spherical_light_volume_mesh_id() => "Spherical light volume mesh";

    fn spherical_light_volume_mesh_spec() => TriangleMeshTemplate::SphericalLightVolume(
        SphericalLightVolumeMesh::new(16)
    );
}

define_builtin_triangle_mesh! {
    /// The [`TriangleMeshID`](crate::TriangleMeshID) of a builtin mesh
    /// generated by
    /// [`TriangleMesh::create_box`](crate::TriangleMesh::create_box) with unit
    /// extents and front faces on the inside.
    fn skybox_mesh_id() => "Skybox mesh";

    fn skybox_mesh_spec() => TriangleMeshTemplate::Box(
        BoxMesh::new(1.0, 1.0, 1.0, FrontFaceSide::Inside)
    );
}
