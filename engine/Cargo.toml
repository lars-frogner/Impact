[workspace]
members = [
    "impact_camera",
    "impact_containers",
    "impact_dev_ui",
    "impact_ecs",
    "impact_ecs/impact_ecs_macros",
    "impact_geometry",
    "impact_gpu",
    "impact_io",
    "impact_light",
    "impact_log",
    "impact_material",
    "impact_math",
    "impact_mesh",
    "impact_model",
    "impact_profiling",
    "impact_rendering",
    "impact_scene",
    "impact_scheduling",
    "impact_thread",
]

[workspace.package]
version = "0.1.0"
edition = "2024"
license = "Apache-2.0"

[workspace.dependencies]
anyhow = "1.0"
approx = "0.5"
arbitrary = { version = "1.4", features = ["derive"] }
bitflags = "2.6"
bytemuck = { version = "1.23", features = ["derive"] }
cfg-if = "1.0"
clap = { version = "4.5", features = ["derive"] }
const-fnv1a-hash = "1.1"
inventory = "0.3"
nalgebra = "0.33"
nohash-hasher = "0.2"
num-traits = "0.2"
paste = "1.0"
rand = "0.9"
serde = { version = "1.0", features = ["derive"] }

[workspace.lints.rust]
future_incompatible = "warn"
missing_debug_implementations = "warn"
nonstandard_style = "warn"
rust_2018_idioms = "warn"
unexpected_cfgs = "warn"

[workspace.lints.clippy]
too_many_arguments = "allow"
let_and_return = "allow"
multiple_bound_locations = "allow"
too_long_first_doc_paragraph = "allow"
derivable_impls = "allow"

cargo = { level = "warn", priority = -1 }
multiple_crate_versions = "allow"
cargo_common_metadata = "allow"

await_holding_lock = "warn"
box_collection = "warn"
cast_lossless = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
doc_markdown = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
extend_with_drain = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
from_iter_instead_of_collect = "warn"
if_let_mutex = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
inefficient_to_string = "warn"
invalid_upcast_comparisons = "warn"
large_digit_groups = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_ok_or = "warn"
map_err_ignore = "warn"
map_flatten = "warn"
map_unwrap_or = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
missing_enforced_import_renames = "warn"
mut_mut = "warn"
mutex_integer = "warn"
needless_borrow = "warn"
needless_collect = "warn"
needless_continue = "warn"
needless_for_each = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
ptr_as_ptr = "warn"
rc_mutex = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
single_element_loop = "warn"
single_match_else = "warn"
string_add_assign = "warn"
string_add = "warn"
string_lit_as_bytes = "warn"
string_to_string = "warn"
todo = "warn"
trait_duplication_in_bounds = "warn"
unimplemented = "warn"
unnecessary_to_owned = "warn"
unnested_or_patterns = "warn"
unused_self = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
zero_sized_map_values = "warn"

[package]
name = "impact"
description = "A Rust game engine with physically based rendering, deformable voxel physics and Roc scripting"
readme = "README.md"
version = { workspace = true }
edition = { workspace = true }
license = { workspace = true }

build = "build.rs"

[features]
default = ["window"]
arbitrary = [
    "dep:arbitrary",
    "impact_ecs/arbitrary",
    "impact_gpu/arbitrary",
    "impact_math/arbitrary",
    "impact_scene/arbitrary",
]
cli = ["dep:clap"]
egui = ["dep:egui", "dep:egui-wgpu", "dep:egui-winit", "window"]
flamegraph = ["profiling"]
fuzzing = ["arbitrary"]
ply = ["impact_mesh/ply"]
profiling = ["impact_profiling"]
roc_codegen = [
    "impact_containers/roc_codegen",
    "impact_camera/roc_codegen",
    "impact_ecs/roc_codegen",
    "impact_geometry/roc_codegen",
    "impact_gpu/roc_codegen",
    "impact_light/roc_codegen",
    "impact_material/roc_codegen",
    "impact_math/roc_codegen",
    "impact_mesh/roc_codegen",
    "impact_model/roc_codegen",
    "impact_scene/roc_codegen",
    "roc_integration/roc_codegen",
]
obj = ["impact_mesh/obj"]
unchecked = []
window = ["dep:winit"]

[dependencies]
anyhow = { workspace = true }
approx = { workspace = true }
arbitrary = { workspace = true, optional = true }
bincode = { version = "2.0", default-features = false, features = [
    "std",
    "serde",
] }
bitflags = { workspace = true, features = ["bytemuck"] }
bytemuck = { workspace = true }
cfg-if = { workspace = true }
clap = { workspace = true, optional = true }
const-fnv1a-hash = { workspace = true }
egui = { version = "0.31", features = ["log"], optional = true }
egui-wgpu = { version = "0.31", optional = true }
egui-winit = { version = "0.31", optional = true }
glam = "0.30"
half = { version = "2.6", features = ["bytemuck"] }
image = { version = "0.25", default-features = false, features = [
    "png",
    "jpeg",
] }
impact_camera = { path = "impact_camera" }
impact_containers = { path = "impact_containers" }
impact_ecs = { path = "impact_ecs" }
impact_geometry = { path = "impact_geometry" }
impact_gpu = { path = "impact_gpu", features = ["serde"] }
impact_io = { path = "impact_io", features = ["ron"] }
impact_light = { path = "impact_light", features = ["serde"] }
impact_log = { path = "impact_log" }
impact_material = { path = "impact_material" }
impact_math = { path = "impact_math", features = ["serde"] }
impact_mesh = { path = "impact_mesh", features = ["serde"] }
impact_model = { path = "impact_model" }
impact_profiling = { path = "impact_profiling", optional = true }
impact_scene = { path = "impact_scene" }
impact_scheduling = { path = "impact_scheduling" }
impact_thread = { path = "impact_thread" }
inventory = { workspace = true }
naga = { version = "24.0", features = ["wgsl-out"] }
nalgebra = { workspace = true, features = ["bytemuck", "serde-serialize"] }
nohash-hasher = { workspace = true }
noise = "0.9"
num-traits = { workspace = true }
ordered-float = "5.0"
paste = { workspace = true }
pollster = "0.4"
rand = { workspace = true }
regex = "1.11"
roc_integration = { path = "../roc_integration" }
roots = "0.0.8"
serde = { workspace = true }
simba = "0.9"
tinyvec = { version = "1.9", features = ["alloc"] }
wgpu = { version = "24.0", features = ["naga-ir", "serde"] }
winit = { version = "0.30", features = ["serde"], optional = true }
xxhash-rust = { version = "0.8", features = ["xxh3"] }

[dev-dependencies]
naga = { version = "24.0", features = ["wgsl-in", "wgsl-out"] }
proptest = "1.7"

[profile.dev.package."image"]
opt-level = 3
[profile.dev.package."ply-rs"]
opt-level = 3
[profile.dev.package."tobj"]
opt-level = 3

[lints]
workspace = true

[profile.release]
debug = "limited"

[[bin]]
name = "impact"
path = "src/bin/impact.rs"
required-features = ["cli"]

[[bench]]
name = "model"
harness = false
required-features = ["profiling"]

[[bench]]
name = "voxel"
harness = false
required-features = ["profiling"]

[[bench]]
name = "constraint"
harness = false
required-features = ["profiling"]
