//! Management of rendering assets.

use crate::gpu::{
    rendering::brdf,
    texture::{MipmapGenerator, TexelType, Texture, TextureConfig, TextureLookupTable},
    GraphicsDevice,
};
use anyhow::Result;
use impact_utils::{hash32, stringhash32_newtype};
use lazy_static::lazy_static;
use serde::{de::DeserializeOwned, Serialize};
use std::{
    collections::{hash_map::Entry, HashMap},
    path::Path,
};

stringhash32_newtype!(
    /// Identifier for specific textures.
    /// Wraps a [`StringHash32`](impact_utils::StringHash32).
    [pub] TextureID
);

/// Container for any rendering assets that never change.
#[derive(Debug)]
pub struct Assets {
    pub textures: HashMap<TextureID, Texture>,
    mipmap_generator: MipmapGenerator,
}

lazy_static! {
    static ref SPECULAR_GGX_REFLECTANCE_LOOKUP_TABLE_TEXTURE_ID: TextureID = TextureID(hash32!(
        Assets::SPECULAR_GGX_REFLECTANCE_LOOKUP_TABLE_TEXTURE_PATH
    ));
}

impl Assets {
    const SPECULAR_GGX_REFLECTANCE_LOOKUP_TABLE_TEXTURE_PATH: &'static str =
        "assets/specular_ggx_reflectance_lookup_table.mpk";

    pub fn specular_ggx_reflectance_lookup_table_texture_id() -> TextureID {
        *SPECULAR_GGX_REFLECTANCE_LOOKUP_TABLE_TEXTURE_ID
    }

    pub fn new(graphics_device: &GraphicsDevice) -> Self {
        Self {
            textures: HashMap::new(),
            mipmap_generator: MipmapGenerator::new(graphics_device.device()),
        }
    }

    pub fn new_with_default_lookup_tables(graphics_device: &GraphicsDevice) -> Result<Self> {
        let mut assets = Self::new(graphics_device);
        assets.load_default_lookup_table_textures(graphics_device)?;
        Ok(assets)
    }

    /// Loads the image file at the given path as a [`Texture`], unless it
    /// already has been loaded.
    ///
    /// # Returns
    /// A [`Result`] with the [`TextureID`] assigned to the loaded texture.
    ///
    /// # Errors
    /// See [`Texture::from_path`].
    pub fn load_texture_from_path(
        &mut self,
        graphics_device: &GraphicsDevice,
        image_path: impl AsRef<Path>,
        config: TextureConfig,
    ) -> Result<TextureID> {
        let texture_id = TextureID(hash32!(image_path.as_ref().to_string_lossy()));
        if let Entry::Vacant(entry) = self.textures.entry(texture_id) {
            entry.insert(Texture::from_path(
                graphics_device,
                &self.mipmap_generator,
                image_path,
                config,
            )?);
        }
        Ok(texture_id)
    }

    /// Loads the cubemap face image files at the given paths as a cubemap
    /// [`Texture`], unless it already has been loaded.
    ///
    /// # Returns
    /// A [`Result`] with the [`TextureID`] assigned to the loaded texture.
    ///
    /// # Errors
    /// See [`Texture::from_cubemap_image_paths`].
    pub fn load_cubemap_texture_from_paths<P: AsRef<Path>>(
        &mut self,
        graphics_device: &GraphicsDevice,
        right_image_path: P,
        left_image_path: P,
        top_image_path: P,
        bottom_image_path: P,
        front_image_path: P,
        back_image_path: P,
        config: TextureConfig,
    ) -> Result<TextureID> {
        let texture_id = TextureID(hash32!(format!(
            "Cubemap {{{}, {}, {}, {}, {}, {}}}",
            right_image_path.as_ref().to_string_lossy(),
            left_image_path.as_ref().to_string_lossy(),
            top_image_path.as_ref().to_string_lossy(),
            bottom_image_path.as_ref().to_string_lossy(),
            front_image_path.as_ref().to_string_lossy(),
            back_image_path.as_ref().to_string_lossy()
        )));

        if let Entry::Vacant(entry) = self.textures.entry(texture_id) {
            entry.insert(Texture::from_cubemap_image_paths(
                graphics_device,
                right_image_path,
                left_image_path,
                top_image_path,
                bottom_image_path,
                front_image_path,
                back_image_path,
                config,
            )?);
        }

        Ok(texture_id)
    }

    /// Loads all default lookup tables as textures. The tables are read from
    /// file or computed.
    ///
    /// # Errors
    /// Returns an error if a computed table can not be saved to file.
    /// Additionally, see [`Texture::from_lookup_table`].
    pub fn load_default_lookup_table_textures(
        &mut self,
        graphics_device: &GraphicsDevice,
    ) -> Result<()> {
        self.load_texture_from_stored_or_computed_lookup_table(
            graphics_device,
            Self::SPECULAR_GGX_REFLECTANCE_LOOKUP_TABLE_TEXTURE_PATH,
            || brdf::create_specular_ggx_reflectance_lookup_tables(1024, 512),
        )?;

        Ok(())
    }

    /// Unless a texture with the given label has already been loaded, this
    /// function loads the lookup table generated by the given function as a
    /// [`Texture`].
    ///
    /// # Returns
    /// A [`Result`] with the [`TextureID`] assigned to the loaded texture.
    ///
    /// # Errors
    /// See [`Texture::from_lookup_table`].
    pub fn load_texture_from_generated_lookup_table<T: TexelType>(
        &mut self,
        graphics_device: &GraphicsDevice,
        generate_table: impl Fn() -> Result<TextureLookupTable<T>>,
        label: impl AsRef<str>,
    ) -> Result<TextureID> {
        let label = label.as_ref();
        let texture_id = TextureID(hash32!(label));
        if let Entry::Vacant(entry) = self.textures.entry(texture_id) {
            entry.insert(Texture::from_lookup_table(
                graphics_device,
                &generate_table()?,
                label,
            )?);
        }
        Ok(texture_id)
    }

    /// Unless a texture with ID corresponding to the given path has already
    /// been loaded, this function loads as a [`Texture`] the lookup table that
    /// is either taken from the file at the given path if it exists, otherwise
    /// it is computed with the given function and saved at the given path.
    ///
    /// # Returns
    /// A [`Result`] with the [`TextureID`] assigned to the loaded texture.
    ///
    /// # Errors
    /// Returns an error if the computed table can not be saved to file.
    /// Additionally, see [`Texture::from_lookup_table`].
    pub fn load_texture_from_stored_or_computed_lookup_table<T>(
        &mut self,
        graphics_device: &GraphicsDevice,
        table_file_path: impl AsRef<Path>,
        compute_table: impl Fn() -> TextureLookupTable<T>,
    ) -> Result<TextureID>
    where
        T: TexelType + Serialize + DeserializeOwned,
    {
        let table_file_path = table_file_path.as_ref();

        self.load_texture_from_generated_lookup_table(
            graphics_device,
            || {
                TextureLookupTable::<T>::read_from_file(table_file_path).or_else(|_| {
                    let table = compute_table();
                    table.save_to_file(table_file_path)?;
                    Ok(table)
                })
            },
            table_file_path.to_string_lossy(),
        )
    }
}
