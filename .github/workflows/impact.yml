name: Impact CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_TARGET_DIR: ${{ github.workspace }}/ci-target
  MIRI_SYSROOT: ${{ github.workspace }}/.miri-sysroot

concurrency:
  # A new push cancels any in-flight run
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  # ───────────────────────────────────────────────────────────────
  # Build crates
  # ───────────────────────────────────────────────────────────────
  build:
    name: Build – ${{ matrix.workspace }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        workspace: [engine, roc_integration, roc_platform/core]
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          - workspace: roc_platform/core
            os: windows-latest
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}

      - uses: dtolnay/rust-toolchain@v1
        with: { toolchain: stable, profile: minimal, override: true }

      - name: Debug build (no default features)
        working-directory: ${{ matrix.workspace }}
        run: cargo build --no-default-features

      - name: Debug build (default features)
        working-directory: ${{ matrix.workspace }}
        run: cargo build

      - name: Debug build (all features)
        working-directory: ${{ matrix.workspace }}
        run: cargo build --all-features

      - name: Release build
        working-directory: ${{ matrix.workspace }}
        run: cargo build --release

  # ───────────────────────────────────────────────────────────────
  # Check each feature
  # ───────────────────────────────────────────────────────────────
  check-features:
    name: Features – ${{ matrix.workspace }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        workspace:
          [
            engine,
            roc_integration,
            roc_platform/core,
            apps/basic_app,
            apps/snapshot_tester,
          ]
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          - workspace: roc_platform/core
            os: windows-latest
          - workspace: apps/basic_app
            os: windows-latest
          - workspace: apps/snapshot_tester
            os: windows-latest
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}

      - uses: dtolnay/rust-toolchain@v1
        with: { toolchain: stable, profile: minimal, override: true }

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack

      - name: cargo hack check --each-feature
        working-directory: ${{ matrix.workspace }}
        run: cargo hack check --each-feature --no-dev-deps

  # ───────────────────────────────────────────────────────────────
  # Build apps
  # ───────────────────────────────────────────────────────────────
  build-apps:
    name: Apps – ${{ matrix.workspace }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        workspace: [apps/basic_app, apps/snapshot_tester]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}

      - uses: dtolnay/rust-toolchain@v1
        with: { toolchain: stable, profile: minimal, override: true }

      - id: roc
        uses: hasnep/setup-roc@v0.5.0
        with:
          roc-version: nightly

      - name: Build (debug)
        working-directory: ${{ matrix.workspace }}
        env:
          ROC_DEBUG: "1"
          RUST_DEBUG: "1"
        run: roc build.roc

      - name: Build (release)
        working-directory: ${{ matrix.workspace }}
        run: roc build.roc

  # ───────────────────────────────────────────────────────────────
  # Regular tests
  # ───────────────────────────────────────────────────────────────
  test:
    name: Tests – ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        workspace: [engine]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}

      - uses: dtolnay/rust-toolchain@v1
        with: { toolchain: stable, profile: minimal, override: true }

      - name: cargo test --all-features
        working-directory: ${{ matrix.workspace }}
        run: cargo test --all-features --workspace

  # ───────────────────────────────────────────────────────────────
  # AddressSanitizer tests
  # ───────────────────────────────────────────────────────────────
  test-asan:
    name: ASan tests – ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        workspace: [engine]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}

      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          targets: ${{ matrix.target }}
          components: rust-src

      - name: Install ASan runtime (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y clang libclang-rt-17-dev

      - name: Test with AddressSanitizer
        working-directory: ${{ matrix.workspace }}
        env:
          ASAN_RUST_FLAGS: "-C linker=clang -Zsanitizer=address"
          RUSTFLAGS: ${{ env.ASAN_RUST_FLAGS }}
          RUSTDOCFLAGS: ${{ env.ASAN_RUST_FLAGS }}
        run: |
          cargo test --all-features --workspace --target ${{ matrix.target }}

  # ───────────────────────────────────────────────────────────────
  # Miri tests
  # ───────────────────────────────────────────────────────────────
  test-miri:
    name: Miri tests – ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        workspace: [engine]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.os == 'windows-latest' }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}
          extra-dirs: |
            ${{ env.MIRI_SYSROOT }}

      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: miri

      - name: cargo miri setup
        run: cargo miri setup

      - name: Test with Miri
        working-directory: ${{ matrix.workspace }}
        env:
          PROPTEST_DISABLE_FAILURE_PERSISTENCE: 1
          PROPTEST_CASES: 1
          MIRIFLAGS: "-Zmiri-disable-isolation -Zmiri-deterministic-floats"
        run: |
          cargo miri test --all-features --workspace

  # ───────────────────────────────────────────────────────────────
  # Snapshot tests
  # ───────────────────────────────────────────────────────────────
  test-snapshot:
    name: Snapshot tests - ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      WORKSPACE: apps/snapshot_tester

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ env.WORKSPACE }}

      - name: Cache generated lookup tables
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKSPACE }}/assets/lookup_tables
          key: ${{ runner.os }}-${{ env.WORKSPACE }}-assets-${{ hashFiles('engine/crates/impact_rendering/src/brdf.rs') }}

      - uses: dtolnay/rust-toolchain@v1
        with: { toolchain: stable, profile: minimal, override: true }

      - id: roc
        uses: hasnep/setup-roc@v0.5.0
        with:
          roc-version: nightly

      - name: Install Mesa software drivers
        uses: ./.github/actions/install-mesa

      - name: Run tests
        working-directory: ${{ env.WORKSPACE }}
        run: ./run.sh

      - name: Upload output on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-tester-output-${{ matrix.os }}
          path: ${{ env.WORKSPACE }}/snapshots/output

  # ───────────────────────────────────────────────────────────────
  # Clippy
  # ───────────────────────────────────────────────────────────────
  lint-clippy:
    name: Clippy – ${{ matrix.workspace }} (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        workspace:
          [
            engine,
            roc_integration,
            roc_platform/core,
            apps/basic_app,
            apps/snapshot_tester,
          ]
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          - workspace: roc_platform/core
            os: windows-latest
          - workspace: apps/basic_app
            os: windows-latest
          - workspace: apps/snapshot_tester
            os: windows-latest
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}

      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy

      - name: Clippy (no default features)
        working-directory: ${{ matrix.workspace }}
        run: cargo clippy --workspace --all-targets --no-default-features -- -D warnings

      - name: Clippy (default features)
        working-directory: ${{ matrix.workspace }}
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Clippy (all features)
        working-directory: ${{ matrix.workspace }}
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  # ───────────────────────────────────────────────────────────────
  # Rustfmt
  # ───────────────────────────────────────────────────────────────
  lint-fmt:
    name: Rustfmt – ${{ matrix.workspace }}
    strategy:
      fail-fast: false
      matrix:
        workspace:
          [
            engine,
            roc_integration,
            roc_platform/core,
            apps/basic_app,
            apps/snapshot_tester,
          ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}

      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt

      - name: Rustfmt
        working-directory: ${{ matrix.workspace }}
        run: cargo fmt --all -- --check

  # ───────────────────────────────────────────────────────────────
  # Docs
  # ───────────────────────────────────────────────────────────────
  docs:
    name: Docs – ${{ matrix.workspace }}
    strategy:
      fail-fast: false
      matrix:
        workspace:
          [
            engine,
            roc_integration,
            roc_platform/core,
            apps/basic_app,
            apps/snapshot_tester,
          ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: r7kamura/rust-problem-matchers@v1
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ matrix.workspace }}

      - uses: dtolnay/rust-toolchain@v1
        with: { toolchain: stable, profile: minimal, override: true }

      - name: cargo doc
        working-directory: ${{ matrix.workspace }}
        run: cargo doc --workspace --no-deps --document-private-items
